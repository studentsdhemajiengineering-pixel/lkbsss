{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the Digital Connect application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the user."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phoneNumber"
      ]
    },
    "ServiceRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ServiceRequest",
      "type": "object",
      "description": "Represents a service request made by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the service request."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the request. (Relationship: User 1:N ServiceRequest)"
        },
        "requestDate": {
          "type": "string",
          "description": "The date and time the service request was created.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The current status of the service request (e.g., 'Pending', 'In Progress', 'Completed')."
        },
        "referenceNumber": {
          "type": "string",
          "description": "A unique reference number for tracking the service request."
        },
        "description": {
          "type": "string",
          "description": "A description of the service requested"
        }
      },
      "required": [
        "id",
        "userId",
        "requestDate",
        "status",
        "referenceNumber",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data. User ID is used as the document ID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/serviceRequests/{serviceRequestId}",
        "definition": {
          "entityName": "ServiceRequest",
          "schema": {
            "$ref": "#/backend/entities/ServiceRequest"
          },
          "description": "Stores service requests made by users. The path enforces ownership; only the user can access their own requests.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "serviceRequestId",
              "description": "The unique identifier for the service request."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence and efficient data retrieval for the Digital Connect application. User data is stored under `/users/{userId}`. Service requests made by users are stored within a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}` to establish a clear ownership hierarchy. This approach enables simple and secure security rules based on path ownership, eliminating the need for complex `get()` calls and ensuring atomic operations. Denormalization isn't explicitly needed in this design as ownership is implicit in the path."
  }
}