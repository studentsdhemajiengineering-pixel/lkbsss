/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the Digital Connect application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the user's UID.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests made by a specific user.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data and service requests.
 * - Listing all users is explicitly disallowed.
 * - Subcollections inherit the ownership constraint from their parent user document.
 * - Data consistency between document IDs and path parameters is enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Users can only manage their own profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with a matching userId.
     *   - request.auth.uid: "user123"
     *   - request.resource.data: { id: "user123", firstName: "John", ... }
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     *   - request.auth.uid: "user123"
     *   - resource.data: { id: "user123", firstName: "John", ... }
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     *   - request.auth.uid: "user123"
     *   - request.resource.data: { id: "user456", firstName: "Jane", ... }
     * @deny (list) - Listing all users is disallowed.
     * @principle Enforces document ownership for writes and restricts listing of user profiles. Validates that the `id` field matches the `userId` path parameter.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isOwner(userId) && resource.data.id == userId;
      allow list: if false;

      /**
       * @description Controls access to service request documents within a user's subcollection. Only the owner can manage their service requests.
       * @path /users/{userId}/serviceRequests/{serviceRequestId}
       * @allow (create) - Authenticated user creates a service request under their userId.
       *   - request.auth.uid: "user123"
       *   - request.resource.data: { userId: "user123", requestDate: "...", ... }
       * @allow (get, list, update, delete) - Authenticated user accesses their own service requests.
       *   - request.auth.uid: "user123"
       *   - resource.data: { userId: "user123", requestDate: "...", ... }
       * @deny (create) - Authenticated user attempts to create a service request for another user.
       *   - request.auth.uid: "user123"
       *   - request.resource.data: { userId: "user456", requestDate: "...", ... }
       * @principle Enforces document ownership and ensures that the 'userId' field, if present, matches the path parameter.
       */
      match /serviceRequests/{serviceRequestId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && (!('userId' in request.resource.data) || request.resource.data.userId == userId);
        allow update, delete: if isOwner(userId) && resource != null && (!('userId' in resource.data) || resource.data.userId == userId);
      }

      /**
       * @description Controls access to any subcollection (1st level) within a user's document. Access is restricted to the owner.
       * @path /users/{userId}/{subcollection}/{docId}
       * @allow (get, list) - Authenticated user reads data in their subcollection.
       *   - request.auth.uid: "user123"
       * @allow (create) - Authenticated user creates a document in their subcollection, ensuring userId matches.
       *   - request.auth.uid: "user123"
       *   - request.resource.data: { userId: "user123", ... }
       * @allow (update, delete) - Authenticated user updates or deletes a document in their subcollection.
       *   - request.auth.uid: "user123"
       *   - resource.data: { userId: "user123", ... }
       * @deny (create) - Authenticated user tries to create a document with a mismatched userId.
       *   - request.auth.uid: "user123"
       *   - request.resource.data: { userId: "user456", ... }
       * @principle Enforces ownership and restricts data access within subcollections to the owner.
       */
      match /{subcollection}/{docId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && (!('userId' in request.resource.data) || request.resource.data.userId == userId);
        allow update, delete: if isOwner(userId) && resource != null && (!('userId' in resource.data) || resource.data.userId == userId);
      }

      /**
       * @description Controls access to any nested subcollection within a user's document. Access is restricted to the owner.
       * @path /users/{userId}/{subcollection}/{docId}/{nestedCollection}/{nestedDocId}
       * @allow (get, list, create, update, delete) - Authenticated user manages data in their nested subcollection.
       *   - request.auth.uid: "user123"
       * @principle Enforces ownership for nested subcollections.
       */
      match /{subcollection}/{docId}/{nestedCollection}/{nestedDocId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update, delete: if isOwner(userId) && resource != null;
      }
    }
  }
}