/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data.  All data is nested under /users/{userId}, either
 * directly or within subcollections, making ownership checks straightforward.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the user's UID.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests made by each user.
 *
 * Key Security Decisions:
 * - User data and service requests are only accessible by the authenticated user.
 * - Listing of all users is disallowed to protect user privacy.
 * - No global admin roles are defined, simplifying the access control model.
 *
 * Denormalization for Authorization: Not required due to the clear ownership hierarchy enforced by the Firestore path structure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with UID 'user123' can read their own profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with UID 'user123' can update their own profile.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User with UID 'user123' can delete their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile for another user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get) User with UID 'user123' cannot read another user's profile ('user456').
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure service requests. Users can only read and write their own service requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with UID 'user123' can create a service request under their profile.
     *   - request.auth.uid: 'user123'
     * @allow (get) User with UID 'user123' can read a service request under their profile.
     *   - request.auth.uid: 'user123'
     * @allow (list) User with UID 'user123' can list service requests under their profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with UID 'user123' can update a service request under their profile.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User with UID 'user123' can delete a service request under their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with UID 'user123' cannot create a service request under another user's profile ('user456').
     *   - request.auth.uid: 'user123'
     * @deny (get) User with UID 'user123' cannot read a service request under another user's profile ('user456').
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

        /**
     * @description Secure invitation requests. Users can only list their own invitation requests.
     * @path /users/{userId}/invitation-requests
     * @allow (list) User with UID 'user123' can list invitation requests under their profile.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for list operations on invitation requests.
     */
    match /users/{userId}/invitation-requests/{document} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if false;
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}