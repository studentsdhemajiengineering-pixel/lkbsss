/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * read and write their own data, stored under their unique user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests
 *   created by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own user document and service requests.
 * - Listing all users is disallowed.
 * - Data validation is relaxed during prototyping to allow for rapid iteration on the data model.
 *
 * Denormalization for Authorization:
 * The data structure is designed to make authorization decisions based on the
 * Firestore path. Specifically, service requests are stored as a subcollection of
 * the user document, so that only the owner can access them.
 *
 * Structural Segregation:
 * All data is private and user-specific, stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all read and write operations.  Validates id on create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service requests for a specific user.  Only the user can read, write, or delete their own service requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User 'user123' can create a service request.
     *   - request.auth.uid: 'user123'
     * @allow (get) User 'user123' can read their service request 'req456'.
     *   - request.auth.uid: 'user123'
     * @allow (update) User 'user123' can update their service request 'req456'.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User 'user123' can delete their service request 'req456'.
     *   - request.auth.uid: 'user123'
     * @deny (create) User 'user456' cannot create a service request for user 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (get) User 'user456' cannot read a service request of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all read and write operations within the user's service requests subcollection.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}