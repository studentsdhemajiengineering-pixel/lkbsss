/**
 * @file Firestore Security Rules for Digital Connect Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only access their own profile and service requests.
 * @data_structure User data is stored under `/users/{userId}`.
 *                  Service requests made by users are stored within a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 * @key_security_decisions
 *   - Users can only create their own profile.
 *   - Users can only access their own service requests.
 *   - No listing of all users is allowed.
 *
 * @denormalization_for_authorization N/A, ownership is implicit in the path.
 * @structural_segregation N/A, all service requests are private to the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user123' cannot create a profile with ID 'anotherUser'.
     * @deny (get) - User with ID 'user123' cannot read profile of user with ID 'anotherUser'.
     * @deny (update) - User with ID 'user123' cannot update profile of user with ID 'anotherUser'.
     * @deny (delete) - User with ID 'user123' cannot delete profile of user with ID 'anotherUser'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to service requests made by a specific user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - User with ID 'user123' can create a service request under their profile.
     * @allow (get) - User with ID 'user123' can read a service request under their profile.
     * @allow (update) - User with ID 'user123' can update a service request under their profile.
     * @allow (delete) - User with ID 'user123' can delete a service request under their profile.
     * @deny (create) - User with ID 'user123' cannot create a service request under another user's profile.
     * @deny (get) - User with ID 'user123' cannot read a service request under another user's profile.
     * @deny (update) - User with ID 'user123' cannot update a service request under another user's profile.
     * @deny (delete) - User with ID 'user123' cannot delete a service request under another user's profile.
     * @principle Enforces document ownership for all operations within the user's service requests subcollection.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}