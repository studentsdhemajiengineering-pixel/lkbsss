rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data based on ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with ID matching the userId in the path can create their profile.
     * @allow (get, update, delete) - Authenticated user with ID matching the userId in the path can read, update, and delete their profile.
     * @deny (create) - Authenticated user attempts to create a profile with a userId that doesn't match their own ID.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an admin can create a role_admin document.  This would require a get() operation to verify their admin status, which is disallowed to maintain authorization independence.
     * @allow (get) - Any authenticated user can check if a user is an admin.
     * @allow (delete) - Only an admin can delete a role_admin document.
     * @deny (create) - A non-admin user attempts to create a role_admin document.
     * @deny (list) - Listing admin roles is not allowed.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to social media posts.
     * @path /social_media_posts/{postId}
     * @allow (get, list) - Any user can read social media posts.
     * @deny (create, update, delete) - Only admins can modify social media posts.
     * @principle Allows public read access with owner-only writes.
     */
    match /social_media_posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to news articles.
     * @path /news_articles/{articleId}
     * @allow (get, list) - Any user can read news articles.
     * @deny (create, update, delete) - Only admins can modify news articles.
     * @principle Allows public read access with owner-only writes.
     */
    match /news_articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to gallery images.
     * @path /gallery_images/{imageId}
     * @allow (get, list) - Any user can read gallery images.
     * @deny (create, update, delete) - Only admins can modify gallery images.
     * @principle Allows public read access with owner-only writes.
     */
    match /gallery_images/{imageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to resources.
     * @path /resources/{resourceId}
     * @allow (get, list) - Any user can read resources.
     * @deny (create, update, delete) - Only admins can modify resources.
     * @principle Allows public read access with owner-only writes.
     */
    match /resources/{resourceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to language pages.
     * @path /language_pages/{pageId}
     * @allow (get, list) - Any user can read language pages.
     * @deny (create, update, delete) - Only admins can modify language pages.
     * @principle Allows public read access with owner-only writes.
     */
    match /language_pages/{pageId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}