/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Service requests are stored under `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing service requests is restricted to the owner of the user subcollection path.
 * - No public data access is allowed.
 *
 * Denormalization for Authorization:
 *  - Not applicable in this design, as ownership is implicit in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the requesting user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get) - A user can read their own profile if authenticated.
     * @allow (update) - A user can update their own profile if the userId matches their auth UID and the resource exists.
     * @allow (delete) - A user can delete their own profile if the userId matches their auth UID and the resource exists.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get) - A user cannot read another user's profile.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for service requests under a specific user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - A user can create a service request under their own user ID.
     * @allow (get) - A user can read their own service requests.
     * @allow (update) - A user can update their own service requests.
     * @allow (delete) - A user can delete their own service requests.
     * @deny (create) - A user cannot create a service request for another user.
     * @deny (get) - A user cannot read another user's service requests.
     * @deny (update) - A user cannot update another user's service requests.
     * @deny (delete) - A user cannot delete another user's service requests.
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}