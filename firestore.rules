/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the user ID.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests made by each user. This subcollection enforces ownership via the path.
 *
 * Key Security Decisions:
 * - Users can only list their own service requests.
 * - Data validation is relaxed in this prototype to allow for rapid schema iteration.
 * - Denormalization is not required due to the path-based ownership model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'test_user' can create their profile document.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { id: 'test_user', ... } }
     * @allow (get) User with ID 'test_user' can read their profile document.
     *   Request: { auth: { uid: 'test_user' } }
     * @allow (update) User with ID 'test_user' can update their profile document.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { id: 'test_user', ... } }
     * @deny (create) User with ID 'test_user' cannot create a profile for another user.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { id: 'other_user', ... } }
     * @deny (get) User with ID 'other_user' cannot read the profile of user 'test_user'.
     *   Request: { auth: { uid: 'other_user' } }
     * @deny (update) User with ID 'other_user' cannot update the profile of user 'test_user'.
     *   Request: { auth: { uid: 'other_user' }, resource.data: { id: 'test_user', ... } }
     * @principle Enforces document ownership for writes, restricts reads to the owner.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows users to manage their own service requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'test_user' can create a service request under their profile.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { userId: 'test_user', ... } }
     * @allow (get) User with ID 'test_user' can read a service request under their profile.
     *   Request: { auth: { uid: 'test_user' } }
     * @allow (list) User with ID 'test_user' can list service requests under their profile.
     *   Request: { auth: { uid: 'test_user' } }
     * @allow (update) User with ID 'test_user' can update a service request under their profile.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { userId: 'test_user', ... } }
     * @allow (delete) User with ID 'test_user' can delete a service request under their profile.
     *   Request: { auth: { uid: 'test_user' } }
     * @deny (create) User with ID 'test_user' cannot create a service request for another user.
     *   Request: { auth: { uid: 'test_user' }, resource.data: { userId: 'other_user', ... } }
     * @deny (get) User with ID 'other_user' cannot read a service request under the 'test_user' profile.
     *   Request: { auth: { uid: 'other_user' } }
     * @deny (list) User with ID 'other_user' cannot list service requests under the 'test_user' profile.
     *   Request: { auth: { uid: 'other_user' } }
     * @deny (update) User with ID 'other_user' cannot update a service request under the 'test_user' profile.
     *   Request: { auth: { uid: 'other_user' }, resource.data: { userId: 'test_user', ... } }
     * @deny (delete) User with ID 'other_user' cannot delete a service request under the 'test_user' profile.
     *   Request: { auth: { uid: 'other_user' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId && isSignedIn();
      allow delete: if isExistingOwner(userId);
    }
  }
}