/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data. This is achieved through hierarchical data organization
 * and path-based authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write
 *   their own profile.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests
 *   created by a user. Only the user can manage their own requests.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent information disclosure.
 * - All write operations are strictly validated against the authenticated user's ID
 *   to prevent unauthorized data modification.
 * - Data consistency between the path and document data is enforced on both
 *   creation and update to prevent accidental misconfigurations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read/write their own profile.
     *   Request: auth.uid = 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: auth.uid = 'user456', resource.data.id = 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read/write 'user123' profile.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership, validates relational integrity.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service requests made by users.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - User 'user123' can create a service request under their ID.
     *   Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @allow (get, update, delete) - User 'user123' can manage their service requests.
     *   Request: auth.uid = 'user123'
     * @deny (create) - User 'user456' cannot create a service request for 'user123'.
     *   Request: auth.uid = 'user456', resource.data.userId = 'user123'
     * @deny (get, update, delete) - User 'user456' cannot manage 'user123' service requests.
     *   Request: auth.uid = 'user456'
     * @principle Enforces document ownership, validates relational integrity.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}