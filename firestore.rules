/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 * - Service requests are stored under `/users/{userId}/serviceRequests/{serviceRequestId}`, creating a clear ownership hierarchy.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The data model inherently denormalizes the `userId` into the path of the `serviceRequests` collection, avoiding the need for complex `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data.
     * @path /users/{userId}
     * @allow (create) A user can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) A user can read, update, and delete their profile if the userId matches their auth UID.
     * @deny (create) A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure service requests made by users.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create, get, list, update, delete) A user can create, read, list, update, and delete their own service requests.
     * @deny (create, get, list, update, delete) A user cannot create, read, list, update, or delete another user's service requests.
     * @principle Enforces document ownership based on the parent path.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}