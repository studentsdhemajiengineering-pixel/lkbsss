/**
 * @fileOverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 * - Service requests made by users are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing all users is disallowed.
 * - Data shape is not validated in this prototyping phase, but ownership is strictly enforced.
 *
 * Denormalization for Authorization:
 * - Ownership is implicitly enforced via path structure `/users/{userId}/serviceRequests/{serviceRequestId}`
 *
 * Structural Segregation:
 * - No public data; all data is private and user-specific.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Enforces access control for service requests within a user's subcollection.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with UID 'user123' can create a service request under their profile.
     * @allow (get) User with UID 'user123' can read a service request under their profile.
     * @allow (update) User with UID 'user123' can update a service request under their profile.
     * @allow (delete) User with UID 'user123' can delete a service request under their profile.
     * @allow (list) User with UID 'user123' can list service requests under their profile.
     * @deny (create) User with UID 'user456' cannot create a service request under /users/user123.
     * @deny (get) User with UID 'user456' cannot read a service request under /users/user123.
     * @principle Enforces document ownership for all operations within the user's subcollection.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }
        
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }
  }
}