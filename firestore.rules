/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Service requests are stored under `/users/{userId}/serviceRequests/{serviceRequestId}`, creating a user-owned subcollection.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing service requests is restricted to the owner of the requests.
 * - Data structure enforces ownership, eliminating the need for denormalization or complex `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to manage their data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if userId == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile if userId == 'user123'.
     * @allow (update) - User with UID 'user123' can update their profile if userId == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete their profile if userId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile under userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Validate that the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow a user to create their own document, but only if the userId matches their auth.uid.
      allow create: if isOwner(userId)
                      && request.resource.data.id == userId;

      // Allow reading the document if the user is the owner.
      allow get: if isOwner(userId);

      // Allow updating the document if the user is the owner and the userId is immutable.
      allow update: if isOwner(userId)
                       && request.resource.data.id == resource.data.id;

      // Allow deleting the document if the user is the owner.
      allow delete: if isOwner(userId);

      // Deny listing all users.
      allow list: if false;
    }

    /**
     * @description Manages service requests, ensuring only the owner can access and modify their requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - User with UID 'user123' can create a service request under their userId.
     * @allow (get) - User with UID 'user123' can read a service request under their userId.
     * @allow (update) - User with UID 'user123' can update a service request under their userId.
     * @allow (delete) - User with UID 'user123' can delete a service request under their userId.
     * @deny (create) - User with UID 'user456' cannot create a service request under userId 'user123'.
     * @principle Enforces strict user ownership for all data access and modification.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      // Validate that the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      //Helper function to check ownership and if the resource exists, used in update and delete
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow creation if the user is the owner.
      allow create: if isOwner(userId);

      // Allow reading if the user is the owner.
      allow get: if isOwner(userId);

      // Allow updates if the user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow deletion if the user is the owner and the document exists.
      allow delete: if isExistingOwner(userId);

      // Allow listing service requests if the user is the owner.
      allow list: if isOwner(userId);
    }
  }
}