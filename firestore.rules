/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Service requests are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only read and write their own service requests.
 * - No public data access is allowed.
 *
 * Denormalization for Authorization:
 * The Firestore structure itself denormalizes the authorization data by nesting service requests under the user's document.
 * This avoids the need for additional reads to determine ownership.
 *
 * Structural Segregation:
 * All user-specific data is stored under the `/users/{userId}` path, ensuring clear separation and easy enforcement of ownership-based rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can create their own profile.
     * @allow (get) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can read their own profile.
     * @allow (update) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can update their own profile.
     * @allow (delete) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can delete their own profile.
     * @deny (create) User 'anotherUserId' cannot create a profile with userId 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3'.
     * @deny (get) User 'anotherUserId' cannot read user 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service requests made by a user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can create a service request under their profile.
     * @allow (get) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can read their own service request.
     * @allow (update) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can update their own service request.
     * @allow (delete) User 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' can delete their own service request.
     * @deny (create) User 'anotherUserId' cannot create a service request under user 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' profile.
     * @deny (get) User 'anotherUserId' cannot read user 'mEHiKNI7SVOfHaaFltYdCrCPAgJ3' service requests.
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}