/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data. This is achieved through hierarchical data organization
 * and path-based authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write
 *   their own profile.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests
 *   created by a user. Only the user can manage their own requests.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules rely on the authenticated user's UID (`request.auth.uid`) for all
 *   authorization decisions.
 * - Data consistency between the path and the document data is enforced on create
 *   and update operations.
 *
 * Denormalization for Authorization:
 * - Ownership is implicitly enforced through the path structure (e.g., a service
 *   request's userId is not explicitly stored in the document, but is derived from
 *   the path /users/{userId}/serviceRequests/{serviceRequestId}).
 *
 * Structural Segregation:
 * - The data model uses subcollections under the user's document to store private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner and resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in and the UID matches, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Manages user profile data.
       * @path /users/{userId}
       * @allow (create) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can create their profile if request.auth.uid == userId.
       * @allow (get) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can read their profile.
       * @allow (update) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can update their profile.
       * @allow (delete) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can delete their profile.
       * @deny (create) User 'otherUserId' cannot create a profile with userId 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
       * @principle Enforces document ownership for writes. Validates relational integrity.
       */
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      match /serviceRequests/{serviceRequestId} {
        /**
         * @description Manages service requests made by a user.
         * @path /users/{userId}/serviceRequests/{serviceRequestId}
         * @allow (create) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can create a service request under their profile.
         * @allow (get) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can read their service request.
         * @allow (update) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can update their service request.
         * @allow (delete) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can delete their service request.
         * @deny (create) User 'otherUserId' cannot create a service request under user 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
         * @principle Enforces document ownership for writes.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}