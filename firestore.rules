/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, with the document ID matching the user ID.
 * - Service requests are stored under `/users/{userId}/serviceRequests/{serviceRequestId}`, establishing a parent-child relationship with the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, read, update, and delete their own service requests.
 * - No listing of all users is allowed.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by path; no denormalization is required. The userId is part of the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile.
     *   - Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   - Request: auth.uid = 'user456', resource.data.id = 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read, update or delete profile for 'user123'.
     *   - Request: auth.uid = 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Rules for the /users/{userId}/serviceRequests/{serviceRequestId} collection.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' can create a service request in their subcollection.
     *   - Request: auth.uid = 'user123', path=/users/user123/serviceRequests/sr1
     * @allow (get, list, update, delete) User with ID 'user123' can read, list, update, and delete their service request.
     *   - Request: auth.uid = 'user123', path=/users/user123/serviceRequests/sr1
     * @deny (create) User with ID 'user456' cannot create a service request in 'user123's subcollection.
     *   - Request: auth.uid = 'user456', path=/users/user123/serviceRequests/sr1
     * @deny (get, list, update, delete) User with ID 'user456' cannot read, list, update, or delete service request from 'user123's subcollection.
     *   - Request: auth.uid = 'user456', path=/users/user123/serviceRequests/sr1
     * @principle Restricts access to a user's own data tree, enforcing ownership.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}