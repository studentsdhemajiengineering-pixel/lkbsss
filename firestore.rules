/**
 * @file Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full access to their own profile and associated service requests.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`, where `{userId}` is the Firebase Authentication UID.
 * - Service requests are stored in `/users/{userId}/serviceRequests/{serviceRequestId}`, creating a user-owned subcollection.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only read, create, update, and delete service requests associated with their profile.
 * - Listing all users is disallowed to prevent data leakage.
 *
 * Denormalization for Authorization:
 * - The data structure itself enforces ownership, so explicit denormalization is not needed.  The `userId` is embedded in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the request is made by the existing owner of the document.
     * @param {string} userId - The user ID to compare against the resource data.
     */
    function isExistingOwner(userId) {
      return request.auth.uid == resource.data.id;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user with UID 'user123' can create their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - A user with UID 'user123' can get their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (update) - A user with UID 'user123' can update their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (delete) - A user with UID 'user123' can delete their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) - A user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - A user with UID 'user456' cannot get the profile at /users/user123.
     * @deny (update) - A user with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - A user with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Security rules for service requests under a user's profile.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - A user with UID 'user123' can create a service request under /users/user123/serviceRequests/req1 if request.auth.uid == 'user123'.
     * @allow (get) - A user with UID 'user123' can get their service request at /users/user123/serviceRequests/req1 if request.auth.uid == 'user123'.
     * @allow (update) - A user with UID 'user123' can update their service request at /users/user123/serviceRequests/req1 if request.auth.uid == 'user123'.
     * @allow (delete) - A user with UID 'user123' can delete their service request at /users/user123/serviceRequests/req1 if request.auth.uid == 'user123'.
     * @deny (create) - A user with UID 'user456' cannot create a service request under /users/user123/serviceRequests/req1.
     * @deny (get) - A user with UID 'user456' cannot get the service request at /users/user123/serviceRequests/req1.
     * @deny (update) - A user with UID 'user456' cannot update the service request at /users/user123/serviceRequests/req1.
     * @deny (delete) - A user with UID 'user456' cannot delete the service request at /users/user123/serviceRequests/req1.
     * @principle Enforces document ownership for all operations within the user's service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}