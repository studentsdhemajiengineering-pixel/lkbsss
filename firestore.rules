/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Service requests are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing all users is disallowed for privacy reasons.
 * - Data consistency is enforced by validating the userId within service requests.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn function to check if a user is authenticated.
     * @principle Authenticated users only
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner function to check if the request is made by the document owner.
     * @principle Document ownership
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner function to check if the request is made by the existing document owner.
     * @principle Document ownership and existence
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource.data != null;
    }

    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for service requests within a user's subcollection.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' can create a service request in their subcollection.
     * @allow (get) User with ID 'user123' can read a service request in their subcollection.
     * @deny (create) User with ID 'user456' cannot create a service request in 'user123' subcollection.
     * @deny (update) User with ID 'user456' cannot update a service request in 'user123' subcollection.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}