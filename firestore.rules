/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data.  Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.  Only the user can read/write their own profile.
 * - `/users/{userId}/serviceRequests/{serviceRequestId}`: Stores service requests for each user. Only the user can manage their own service requests.
 *
 * Key Security Decisions:
 * - Users cannot list all user accounts.
 * - All write operations are protected by authorization checks; there are no `allow write: if true;` rules.
 *
 * Denormalization for Authorization: Not explicitly needed as ownership is implicit in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete user 'user123's profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      // Allow a user to create their own profile if the ID matches their auth ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      // Allow a user to get, update, and delete their own profile.
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      // Prevent listing all user documents.
      allow list: if false;
    }

    /**
     * @description Controls access to service requests for a specific user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - User with ID 'user123' can create a service request under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, list, update, delete) - User with ID 'user123' can read, list, update, or delete their own service requests.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' cannot create a service request for user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (get, list, update, delete) - User with ID 'user456' cannot access service requests for user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      // Allow a user to create a service request if they are the owner.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Allow a user to get, list, update, and delete their own service requests.
      allow get, list, update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ----- Helper Functions -----

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the request is made by the owner (userId matches request.auth.uid).
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is the owner and the resource exists (for update/delete).
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}