/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access data under their own UID.  It prioritizes security and data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the user's UID.
 * - /users/{userId}/serviceRequests/{serviceRequestId}: Stores service requests created by users,
 *   nested under the user's document to enforce ownership.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed via the rules structure. Only individual user documents can be accessed via their UID.
 * - Ambiguous scenarios default to the most secure interpretation: strict owner-only access.
 * - Rules are designed to be future-proof, minimizing the need for modifications as the application evolves.
 *
 * Denormalization for Authorization:
 * Ownership is implicit in the path for service requests under /users/{userId},
 * eliminating the need for denormalized ownership fields or complex `get()` calls.
 *
 * Structural Segregation:
 * The structure inherently segregates user data, with service requests stored under
 * the respective user's document, reinforcing the ownership model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure service requests under user profiles. Only the user can read/write their own requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' can create a service request under their profile.
     * @allow (get) User with ID 'user123' can read a service request under their profile.
     * @allow (update) User with ID 'user123' can update a service request under their profile.
     * @allow (delete) User with ID 'user123' can delete a service request under their profile.
     * @deny (create) User with ID 'user456' cannot create a service request under 'user123''s profile.
     * @deny (get) User with ID 'user456' cannot read a service request under 'user123''s profile.
     * @deny (update) User with ID 'user456' cannot update a service request under 'user123''s profile.
     * @deny (delete) User with ID 'user456' cannot delete a service request under 'user123''s profile.
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
        /**
         * @description Secure all subcollections under /users/{userId}.
         * @path /users/{userId}/{documents=**}
         * @allow (create) User with ID 'user123' can create documents in any subcollection under their profile.
         * @allow (get) User with ID 'user123' can read documents in any subcollection under their profile.
         * @allow (update) User with ID 'user123' can update documents in any subcollection under their profile.
         * @allow (delete) User with ID 'user123' can delete documents in any subcollection under their profile.
         * @deny (create) User with ID 'user456' cannot create documents in subcollections under 'user123''s profile.
         * @deny (get) User with ID 'user456' cannot read documents in subcollections under 'user123''s profile.
         * @deny (update) User with ID 'user456' cannot update documents in subcollections under 'user123''s profile.
         * @deny (delete) User with ID 'user456' cannot delete documents in subcollections under 'user123''s profile.
         * @principle Enforces strict ownership for all subcollections under user profiles.
         */
         match /users/{userId}/{documents=**} {
          function isOwner(userId) {
            return request.auth.uid == userId;
          }
          function isExistingOwner(userId) {
              return isOwner(userId) && resource.data != null;
          }
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if request.auth.uid == userId;
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
  }
}