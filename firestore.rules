/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data.
 *
 * Data Structure:
 * - All user data is stored under `/users/{userId}`, with the `userId` used as the document ID.
 * - Service requests are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`,
 *   creating a hierarchy that simplifies ownership-based security.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Users can only create, read, update, and delete service requests under their own user document.
 * - Listing of documents in the `serviceRequests` subcollection is allowed only for the owner.
 * - Data validation is relaxed in this prototype, focusing on ownership and relationship integrity.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by the Firestore path structure `/users/{userId}/...`, avoiding the need
 *   for denormalized `ownerId` fields within the documents themselves. The `userId` path segment
 *   acts as the source of truth for ownership.
 *
 * Structural Segregation:
 * - The application uses a hierarchical structure (`/users/{userId}/serviceRequests/{serviceRequestId}`)
 *   to keep private user data separate and enforce clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Authenticated user can create their own user document, where the userId in the path matches their auth.uid.
     * @allow (get) Authenticated user can get their own user document, where the userId in the path matches their auth.uid.
     * @allow (update) Authenticated user can update their own user document, where the userId in the path matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own user document, where the userId in the path matches their auth.uid.
     * @allow (list) Listing user documents is disallowed.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update) If the user ID in the path does not match the authenticated user's ID.
     * @deny (delete) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service request documents within a user's subcollection.
     * @path /databases/{database}/documents/users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) Authenticated user can create a service request under their user document, where the userId in the path matches their auth.uid.
     * @allow (get) Authenticated user can get a service request under their user document, where the userId in the path matches their auth.uid.
     * @allow (update) Authenticated user can update a service request under their user document, where the userId in the path matches their auth.uid.
     * @allow (delete) Authenticated user can delete a service request under their user document, where the userId in the path matches their auth.uid.
     * @allow (list) Authenticated user can list all service requests under their user document, where the userId in the path matches their auth.uid.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get) If the user ID in the path does not match the authenticated user's ID.
     * @deny (update) If the user ID in the path does not match the authenticated user's ID.
     * @deny (delete) If the user ID in the path does not match the authenticated user's ID.
     * @deny (list) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}