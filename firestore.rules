/**
 * @file Firestore Security Rules for Digital Connect application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Users can only access their own profile data and service requests.
 * @data_structure User data is stored under `/users/{userId}`, and service requests are stored in the `/users/{userId}/serviceRequests/{serviceRequestId}` subcollection.
 * @key_security_decisions
 *   - Users can only create their own user document (self-registration).
 *   - Users can only access their own service requests.
 *   - Listing of all users is disallowed.
 *   - No denormalization is required because the path structure enforces ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile for another user ('user456').
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete the profile of another user ('user456').
     *   - request.auth.uid: 'user123'
     *   - resource.data.id: 'user456'
     * @deny (list) Listing all users is disallowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own service requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' can create a service request under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own service request.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User with ID 'user123' cannot create a service request under another user's profile ('user456').
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete a service request belonging to another user ('user456').
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user456'
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}