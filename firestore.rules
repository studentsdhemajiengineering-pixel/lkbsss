/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and service requests.
 * Only an authenticated user can read/write their own profile and service requests.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 * - Service requests are stored in `/users/{userId}/serviceRequests/{serviceRequestId}`,
 *   creating a hierarchical ownership structure.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules rely on path-based authorization, ensuring that a user can only access
 *   resources under their own user ID. This eliminates the need for complex data
 *   validation or `get()` calls to determine ownership.
 *
 * Denormalization for Authorization:
 * - Ownership is implicit in the path, negating the need for data denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines helper function to check if the request is from a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines helper function to check if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines helper function to check if the user is the existing owner of a document.
     * @details Combines ownership check with existence check for update/delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if the document ID matches their UID.
     * @allow (get) - User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their own profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/serviceRequests/{serviceRequestId} collection.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) - User with UID 'user123' can create a service request at /users/user123/serviceRequests/request1 if the userId matches.
     * @allow (get) - User with UID 'user123' can read their own service request at /users/user123/serviceRequests/request1.
     * @allow (update) - User with UID 'user123' can update their own service request at /users/user123/serviceRequests/request1.
     * @allow (delete) - User with UID 'user123' can delete their own service request at /users/user123/serviceRequests/request1.
     * @deny (create) - User with UID 'user456' cannot create a service request at /users/user123/serviceRequests/request1.
     * @deny (get) - User with UID 'user456' cannot read the service request at /users/user123/serviceRequests/request1.
     * @deny (update) - User with UID 'user456' cannot update the service request at /users/user123/serviceRequests/request1.
     * @deny (delete) - User with UID 'user456' cannot delete the service request at /users/user123/serviceRequests/request1.
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}