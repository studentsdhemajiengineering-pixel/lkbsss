/**
 * @file Firestore Security Rules â€” Digital Connect (Final Fixed Version)
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for all data. Each authenticated user can only access data directly associated with their user ID.
 * @dataStructure User profiles are stored under `/users/{userId}` and service requests are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 * @keySecurityDecisions Listing all users is explicitly denied to prevent information leakage. The rules are structured to avoid complex `get()` calls by leveraging the path for authorization.
 * @denormalizationAuthorization The data structure is designed to make authorization checks simple and performant, avoiding the need for denormalization.
 * @structuralSegregation There is no need to segregate public and private data, because all data is private to a user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is authenticated.
     * @details Returns true if `request.auth` is not null, indicating the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user owns the resource based on the provided userId.
     * @details Compares the `request.auth.uid` to the `userId` path parameter.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing resource based on the provided userId.
     * @details Compares the `request.auth.uid` to the `userId` path parameter and checks if the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule set for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete their profile.
     * @deny (create) - Authenticated user trying to create a profile with a different userId.
     * @deny (list) - Prevents listing all users.
     * @principle Enforces document ownership; users can only access their own profile data.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rule set for service requests under a user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create, get, update, delete) - Authenticated user with matching userId can create, read, update, or delete their service requests.
     * @deny (create) - Authenticated user trying to create a service request under a different userId.
     * @deny (list) - Authenticated user with matching userId can list their service requests.
     * @principle Enforces document ownership; users can only access their own service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}