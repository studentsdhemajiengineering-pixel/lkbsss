rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get) User with matching ID can get their own profile.
     * @allow (update) User with matching ID can update their own profile.
     * @allow (delete) User with matching ID can delete their own profile.
     * @deny (create) User attempts to create a profile with a different ID.
     * @deny (get) User attempts to get another user's profile.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects service requests made by users.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with matching ID can create a service request.
     * @allow (get) User with matching ID can get their own service request.
     * @allow (update) User with matching ID can update their own service request.
     * @allow (delete) User with matching ID can delete their own service request.
     * @deny (create) User attempts to create a service request for a different user.
     * @deny (get) User attempts to get another user's service request.
     * @deny (update) User attempts to update another user's service request.
     * @deny (delete) User attempts to delete another user's service request.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      //Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}