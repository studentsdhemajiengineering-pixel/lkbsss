/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access and modify data that belongs to them.
 *
 * Data Structure:
 * - User profile data is stored in `/users/{userId}`.
 * - Service requests made by users are stored in `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only read, create, update, and delete their own service requests.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * Ownership is implicit in the path `/users/{userId}/serviceRequests/{serviceRequestId}`, avoiding the need for denormalization.
 *
 * Structural Segregation:
 * There is no need for structural segregation in this data model. All service requests are private to the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document (based on the userId in the path) and that the document exists.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' retrieves their profile.
     *   - auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *   - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile.
     *   - auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     *   - auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get) User with ID 'user456' attempts to retrieve the profile of 'user123'.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for service requests.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' creates a service request.
     *   - auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' retrieves their service request.
     *   - auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their service request.
     *   - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their service request.
     *   - auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a service request for 'user123'.
     *   - auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (get) User with ID 'user456' attempts to retrieve the service request of 'user123'.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}