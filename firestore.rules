/**
 * Firestore Security Rules for Digital Connect.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model,
 * ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Service requests for each user are stored in
 *   `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only read, create, update, and delete their own profiles.
 * - Listing all users is disallowed.
 * - Users can only read, create, update, and delete their own service requests.
 * - Data consistency between the path and the document's userId is enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles and their service requests.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update user 'user123's profile.
     * @deny (delete) User with ID 'user456' cannot delete user 'user123's profile.
     * @deny (list) Listing all user documents is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {

      // ---------- Helper Functions ----------
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // ---------- User Profile Document ----------
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Enforces access control for service requests.  Only the owner can manage them.
       * @path /users/{userId}/serviceRequests/{serviceRequestId}
       * @allow (get) User with ID 'user123' can read their service request.
       * @allow (list) User with ID 'user123' can list their service requests.
       * @allow (create) User with ID 'user123' can create a service request. The request must have userId: user123.
       * @allow (update) User with ID 'user123' can update their service request.
       * @allow (delete) User with ID 'user123' can delete their service request.
       * @deny (get) User with ID 'user456' cannot read service request 'service1' of user 'user123'.
       * @deny (create) User with ID 'user456' cannot create a service request for user 'user123'.
       * @deny (update) User with ID 'user456' cannot update service request 'service1' of user 'user123'.
       * @deny (delete) User with ID 'user456' cannot delete service request 'service1' of user 'user123'.
       * @principle Enforces document ownership for service requests.
       */
      match /serviceRequests/{serviceRequestId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}