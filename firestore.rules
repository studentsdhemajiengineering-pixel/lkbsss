/**
 * @file Firestore Security Rules for Digital Connect application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model. Users can only
 *                 access their own data and the service requests they have created.
 *
 * @dataStructure User data is stored under `/users/{userId}`, with each user document
 *                named after their unique user ID. Service requests are stored in a
 *                subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`
 *                under each user's document, providing clear ownership.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed to protect user privacy.
 *   - Service requests are strictly user-owned; no cross-user access is permitted.
 *   - The rules explicitly deny any unauthorized access attempts.
 *
 * @denormalizationForAuthorization Not applicable; ownership is derived directly from
 *                                  the Firestore path structure.
 * @structuralSegregation Not applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users in the database.
     * @path /users
     * @allow None - User listing is not permitted.
     * @deny list - Attempts to list all user documents.
     * @principle Prevents unauthorized enumeration of user accounts.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages access to individual user documents.
     * @path /users/{userId}
     * @allow (create) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can create their own user document.
     * @allow (get) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can read their own user document.
     * @allow (update) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can update their own user document.
     * @allow (delete) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can delete their own user document.
     * @deny (create) User 'OtherUser' cannot create a user document with ID 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
     * @deny (get) User 'OtherUser' cannot read the user document of 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
     * @principle Enforces document ownership; users can only access their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to service requests for a specific user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can create a service request under their own user document.
     * @allow (get) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can read a service request under their own user document.
     * @allow (list) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can list service requests under their own user document.
     * @allow (update) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can update a service request under their own user document.
     * @allow (delete) User 'P4urHKI134Rsor6RDIKgv7qCoAG2' can delete a service request under their own user document.
     * @deny (create) User 'OtherUser' cannot create a service request under the user document of 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
     * @deny (get) User 'OtherUser' cannot read a service request under the user document of 'P4urHKI134Rsor6RDIKgv7qCoAG2'.
     * @principle Enforces document ownership; users can only access their own service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}