/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, with the `userId` used as the document ID.
 * - Service requests made by users are stored in a subcollection `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own service requests.
 * - Listing of service requests is restricted to the owner of the user profile.
 * - All write operations are validated to ensure the user ID in the path matches the authenticated user's ID.
 * - Data validation is limited to ownership checks for relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *    - auth.uid: 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *    - auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *    - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *    - auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *    - auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only signed-in users can perform operations.
      allow get: if isSignedIn();
      allow list: if false; // Listing users is not permitted

      // Allow creating a user document if the userId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow updating and deleting a user document if the userId matches the authenticated user's UID and the document exists.
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure service requests for each user.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User with ID 'user123' can create a service request.
     *    - auth.uid: 'user123'
     * @allow (get) User with ID 'user123' can read a service request.
     *    - auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update a service request.
     *    - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete a service request.
     *    - auth.uid: 'user123'
     * @allow (list) User with ID 'user123' can list their service requests.
     *    - auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a service request for 'user123'.
     *    - auth.uid: 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      // Only signed-in users can perform operations.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creating a service request if the userId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow updating and deleting a service request if the userId matches the authenticated user's UID and the document exists.
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper function to check if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to check if the user is the owner of the document based on the userId in the path.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to check if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}