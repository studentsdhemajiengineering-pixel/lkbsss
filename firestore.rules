/**
 * @fileoverview Firestore Security Rules for Digital Connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Service requests are stored under `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage their own service requests.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The data model leverages the Firestore path structure itself for authorization, specifically for service requests.
 *   The path `/users/{userId}/serviceRequests/{serviceRequestId}` inherently ties a service request to a specific user,
 *   allowing security rules to directly check the `userId` parameter against the `request.auth.uid` without needing
 *   to read any data from the document.
 *
 * Structural Segregation:
 * - All private data is stored under the `/users/{userId}` path, ensuring clear separation from any potential public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's ID matches the requested document ID, they can create their profile.
     * @allow (get, update, delete) - If the user's ID matches the document ID, they can read, update, or delete their profile.
     * @deny (list) - Listing all users is not permitted.
     * @deny (create, update, delete) - If the user's ID does not match the document ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for service requests under a specific user's path.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create, get, list, update, delete) - If the user's ID matches the userId in the path, they can perform any operation.
     * @deny (create, get, list, update, delete) - If the user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations on service requests.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document (based on the path).
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}