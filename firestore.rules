rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule set for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' cannot create a user document for another user 'user456'.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @principle Enforces document ownership and validates relational integrity on creation.
     */
    match /users/{userId} {
      // Validate that the user ID in the path matches the authenticated user's ID.
      allow create: if isSignedIn() && isSelfCreate(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) ;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rule set for service request documents within a user's subcollection.
     * @path /users/{userId}/serviceRequests/{serviceRequestId}
     * @allow (create) User 'user123' can create a service request under their own user document.
     *   - auth.uid: 'user123'
     * @deny (create) User 'user123' cannot create a service request under another user's document.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/serviceRequests/{serviceRequestId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ---- Helper functions ----

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document based on the path.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the authenticated user is creating their own user document, verifying identity matches document id
    function isSelfCreate(userId) {
          return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document, and the document exists
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

     // Prevents the user ID from being changed after the document is created.
     //function isUserIdNotChanged(userId) {
     // return request.resource.data.id == resource.data.id;
    //}
  }
}