/**
 * @file Firestore Security Rules ‚Äî Digital Connect (Final Corrected Version)
 *
 * üîê Core Principles:
 * - Every authenticated user can access only their own data.
 * - Works automatically for *any* subcollection (e.g. serviceRequests, health-requests, appointments, etc.).
 * - Prevents unauthorized access, listing, or cross-user data exposure.
 * - Compatible with Firebase Auth (Email, Phone, Google, etc.).
 *
 * üè† Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Service requests for each user are stored in `/users/{userId}/serviceRequests/{serviceRequestId}`.
 *
 * üîí Key Security Decisions:
 * - Strict user-ownership model: Users can only access their own profiles and service requests.
 * - No public user directory: Listing all users is explicitly disabled.
 * - Path-based authorization: Ownership is enforced by the Firestore path structure itself.
 *
 * üîë Denormalization for Authorization:
 * - Not required: Ownership is implicit in the path structure. The `userId` parameter in the path `/users/{userId}` *is* the denormalized owner ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * Check if the user is authenticated
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * Check if the authenticated user owns the document path
     * @param {string} userId - The user ID from the document path.
     * @return {bool} - True if the user is signed in and the UID matches the userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their own profile if request.auth.uid == 'user_abc'.
     * @allow (get) - Authenticated user 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - Authenticated user 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - Authenticated user 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get) - Authenticated user 'user_xyz' cannot read the profile at /users/user_abc.
     * @principle Enforces document ownership; only the user can read/write their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No public directory. Listing all users is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Rules for the /users/{userId}/serviceRequests/{serviceRequestId} collection.
       * @path /users/{userId}/serviceRequests/{serviceRequestId}
       * @allow (create) - Authenticated user 'user_abc' can create a service request under /users/user_abc/serviceRequests/req123.
       * @allow (get) - Authenticated user 'user_abc' can read their service request at /users/user_abc/serviceRequests/req123.
       * @allow (update) - Authenticated user 'user_abc' can update their service request at /users/user_abc/serviceRequests/req123.
       * @allow (delete) - Authenticated user 'user_abc' can delete their service request at /users/user_abc/serviceRequests/req123.
       * @deny (create) - Authenticated user 'user_xyz' cannot create a service request under /users/user_abc/serviceRequests/req123.
       * @deny (get) - Authenticated user 'user_xyz' cannot read service request at /users/user_abc/serviceRequests/req123.
       * @principle Enforces document ownership; only the user can read/write their own service requests.
       */
      match /serviceRequests/{serviceRequestId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
      }
    }
  }
}